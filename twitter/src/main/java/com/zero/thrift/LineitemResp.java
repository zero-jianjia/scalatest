/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.zero.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-24")
public class LineitemResp implements org.apache.thrift.TBase<LineitemResp, LineitemResp._Fields>, java.io.Serializable, Cloneable, Comparable<LineitemResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LineitemResp");

  private static final org.apache.thrift.protocol.TField LINEITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lineitemId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AD_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("adIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DIRECTIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("directional", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LineitemRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LineitemRespTupleSchemeFactory());
  }

  public String lineitemId; // required
  public List<String> adIds; // required
  public String directional; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LINEITEM_ID((short)1, "lineitemId"),
    AD_IDS((short)2, "adIds"),
    DIRECTIONAL((short)3, "directional");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LINEITEM_ID
          return LINEITEM_ID;
        case 2: // AD_IDS
          return AD_IDS;
        case 3: // DIRECTIONAL
          return DIRECTIONAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LINEITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("lineitemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_IDS, new org.apache.thrift.meta_data.FieldMetaData("adIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DIRECTIONAL, new org.apache.thrift.meta_data.FieldMetaData("directional", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LineitemResp.class, metaDataMap);
  }

  public LineitemResp() {
  }

  public LineitemResp(
    String lineitemId,
    List<String> adIds,
    String directional)
  {
    this();
    this.lineitemId = lineitemId;
    this.adIds = adIds;
    this.directional = directional;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LineitemResp(LineitemResp other) {
    if (other.isSetLineitemId()) {
      this.lineitemId = other.lineitemId;
    }
    if (other.isSetAdIds()) {
      List<String> __this__adIds = new ArrayList<String>(other.adIds);
      this.adIds = __this__adIds;
    }
    if (other.isSetDirectional()) {
      this.directional = other.directional;
    }
  }

  public LineitemResp deepCopy() {
    return new LineitemResp(this);
  }

  @Override
  public void clear() {
    this.lineitemId = null;
    this.adIds = null;
    this.directional = null;
  }

  public String getLineitemId() {
    return this.lineitemId;
  }

  public LineitemResp setLineitemId(String lineitemId) {
    this.lineitemId = lineitemId;
    return this;
  }

  public void unsetLineitemId() {
    this.lineitemId = null;
  }

  /** Returns true if field lineitemId is set (has been assigned a value) and false otherwise */
  public boolean isSetLineitemId() {
    return this.lineitemId != null;
  }

  public void setLineitemIdIsSet(boolean value) {
    if (!value) {
      this.lineitemId = null;
    }
  }

  public int getAdIdsSize() {
    return (this.adIds == null) ? 0 : this.adIds.size();
  }

  public java.util.Iterator<String> getAdIdsIterator() {
    return (this.adIds == null) ? null : this.adIds.iterator();
  }

  public void addToAdIds(String elem) {
    if (this.adIds == null) {
      this.adIds = new ArrayList<String>();
    }
    this.adIds.add(elem);
  }

  public List<String> getAdIds() {
    return this.adIds;
  }

  public LineitemResp setAdIds(List<String> adIds) {
    this.adIds = adIds;
    return this;
  }

  public void unsetAdIds() {
    this.adIds = null;
  }

  /** Returns true if field adIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAdIds() {
    return this.adIds != null;
  }

  public void setAdIdsIsSet(boolean value) {
    if (!value) {
      this.adIds = null;
    }
  }

  public String getDirectional() {
    return this.directional;
  }

  public LineitemResp setDirectional(String directional) {
    this.directional = directional;
    return this;
  }

  public void unsetDirectional() {
    this.directional = null;
  }

  /** Returns true if field directional is set (has been assigned a value) and false otherwise */
  public boolean isSetDirectional() {
    return this.directional != null;
  }

  public void setDirectionalIsSet(boolean value) {
    if (!value) {
      this.directional = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LINEITEM_ID:
      if (value == null) {
        unsetLineitemId();
      } else {
        setLineitemId((String)value);
      }
      break;

    case AD_IDS:
      if (value == null) {
        unsetAdIds();
      } else {
        setAdIds((List<String>)value);
      }
      break;

    case DIRECTIONAL:
      if (value == null) {
        unsetDirectional();
      } else {
        setDirectional((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LINEITEM_ID:
      return getLineitemId();

    case AD_IDS:
      return getAdIds();

    case DIRECTIONAL:
      return getDirectional();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LINEITEM_ID:
      return isSetLineitemId();
    case AD_IDS:
      return isSetAdIds();
    case DIRECTIONAL:
      return isSetDirectional();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LineitemResp)
      return this.equals((LineitemResp)that);
    return false;
  }

  public boolean equals(LineitemResp that) {
    if (that == null)
      return false;

    boolean this_present_lineitemId = true && this.isSetLineitemId();
    boolean that_present_lineitemId = true && that.isSetLineitemId();
    if (this_present_lineitemId || that_present_lineitemId) {
      if (!(this_present_lineitemId && that_present_lineitemId))
        return false;
      if (!this.lineitemId.equals(that.lineitemId))
        return false;
    }

    boolean this_present_adIds = true && this.isSetAdIds();
    boolean that_present_adIds = true && that.isSetAdIds();
    if (this_present_adIds || that_present_adIds) {
      if (!(this_present_adIds && that_present_adIds))
        return false;
      if (!this.adIds.equals(that.adIds))
        return false;
    }

    boolean this_present_directional = true && this.isSetDirectional();
    boolean that_present_directional = true && that.isSetDirectional();
    if (this_present_directional || that_present_directional) {
      if (!(this_present_directional && that_present_directional))
        return false;
      if (!this.directional.equals(that.directional))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lineitemId = true && (isSetLineitemId());
    list.add(present_lineitemId);
    if (present_lineitemId)
      list.add(lineitemId);

    boolean present_adIds = true && (isSetAdIds());
    list.add(present_adIds);
    if (present_adIds)
      list.add(adIds);

    boolean present_directional = true && (isSetDirectional());
    list.add(present_directional);
    if (present_directional)
      list.add(directional);

    return list.hashCode();
  }

  @Override
  public int compareTo(LineitemResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLineitemId()).compareTo(other.isSetLineitemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineitemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineitemId, other.lineitemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdIds()).compareTo(other.isSetAdIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adIds, other.adIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirectional()).compareTo(other.isSetDirectional());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirectional()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.directional, other.directional);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LineitemResp(");
    boolean first = true;

    sb.append("lineitemId:");
    if (this.lineitemId == null) {
      sb.append("null");
    } else {
      sb.append(this.lineitemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adIds:");
    if (this.adIds == null) {
      sb.append("null");
    } else {
      sb.append(this.adIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("directional:");
    if (this.directional == null) {
      sb.append("null");
    } else {
      sb.append(this.directional);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LineitemRespStandardSchemeFactory implements SchemeFactory {
    public LineitemRespStandardScheme getScheme() {
      return new LineitemRespStandardScheme();
    }
  }

  private static class LineitemRespStandardScheme extends StandardScheme<LineitemResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LineitemResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LINEITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineitemId = iprot.readString();
              struct.setLineitemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AD_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.adIds = new ArrayList<String>(_list16.size);
                String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.adIds.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setAdIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIRECTIONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.directional = iprot.readString();
              struct.setDirectionalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LineitemResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lineitemId != null) {
        oprot.writeFieldBegin(LINEITEM_ID_FIELD_DESC);
        oprot.writeString(struct.lineitemId);
        oprot.writeFieldEnd();
      }
      if (struct.adIds != null) {
        oprot.writeFieldBegin(AD_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.adIds.size()));
          for (String _iter19 : struct.adIds)
          {
            oprot.writeString(_iter19);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.directional != null) {
        oprot.writeFieldBegin(DIRECTIONAL_FIELD_DESC);
        oprot.writeString(struct.directional);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LineitemRespTupleSchemeFactory implements SchemeFactory {
    public LineitemRespTupleScheme getScheme() {
      return new LineitemRespTupleScheme();
    }
  }

  private static class LineitemRespTupleScheme extends TupleScheme<LineitemResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LineitemResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLineitemId()) {
        optionals.set(0);
      }
      if (struct.isSetAdIds()) {
        optionals.set(1);
      }
      if (struct.isSetDirectional()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLineitemId()) {
        oprot.writeString(struct.lineitemId);
      }
      if (struct.isSetAdIds()) {
        {
          oprot.writeI32(struct.adIds.size());
          for (String _iter20 : struct.adIds)
          {
            oprot.writeString(_iter20);
          }
        }
      }
      if (struct.isSetDirectional()) {
        oprot.writeString(struct.directional);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LineitemResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.lineitemId = iprot.readString();
        struct.setLineitemIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.adIds = new ArrayList<String>(_list21.size);
          String _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = iprot.readString();
            struct.adIds.add(_elem22);
          }
        }
        struct.setAdIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.directional = iprot.readString();
        struct.setDirectionalIsSet(true);
      }
    }
  }

}

